package homework_8;

public class Main {

    /*
    Дано прямоугольное поле размером n*m клеток. Можно совершать шаги длиной в
    одну клетку вправо или вниз. Посчитать, сколькими способами можно попасть из
    левой верхней клетки в правую нижнюю. Попробуйте решить задачу методом динамического программирования.
    Подсказка: Начать рассуждение можно так: "В некоторую клетку с координатами (i,j)
    можно прийти только сверху или слева, то есть из клеток с координатами (i – 1, j) и (i, j – 1).
    Таким образом, для клетки (i, j) число маршрутов A[i][j] будет равно A[i – 1][j] + A[i][j – 1],
    то есть задача сводится к двум подзадачам.".
     */
    public static void main(String[] args) {
        int n = 4, m = 5;
        int[][] array = new int[n][m];
        // Заполнение нулевой строки единицами
        for (int i = 0; i < m; i++) {
            array[0][i] = 1;
        }
        // Заполнение нулевого столбца единицами
        for (int i = 0; i < n; i++) {
            array[i][0] = 1;
        }
        // Заполнение остальных элементов
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                // Все остальные ячейки заполняем по формуле
                array[i][j] = array[i - 1][j] + array[i][j - 1];
            }
        }
        // Вывод
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(array[i][j] + " ");
            }
            System.out.println();
        }
    }
}
